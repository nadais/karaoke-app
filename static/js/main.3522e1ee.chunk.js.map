{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","storageKey","useState","getLocalStorageSongs","rowData","setRowData","gridApi","setGridApi","loading","setLoading","setGridColumnApi","songs","window","localStorage","getItem","JSON","parse","fetchSongsRemotely","fetch","then","result","json","rows","setItem","stringify","useEffect","length","align","onClick","class","role","getLoading","style","backgroundColor","padding","type","width","borderRadius","outline","border","fontSize","onChange","e","setQuickFilter","target","value","placeholder","className","height","defaultColDef","flex","sortable","resizable","filter","onGridReady","params","api","columnApi","field","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4NA2FeA,MApFf,WACI,IAAMC,EAAa,kBACnB,EAA8BC,mBAASC,KAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BH,mBAAS,MAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KACA,EAA8BL,oBAAS,GAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KACA,EAA0CP,mBAAS,MAAnD,mBAAsBQ,GAAtB,WAsBA,SAASP,IACL,IAAIQ,EAAQC,OAAOC,aAAaC,QAAQb,GACxC,OAAa,MAATU,EACO,GAEJI,KAAKC,MAAML,GAStB,SAASM,IACLR,GAAW,GACXS,MAAM,sDACDC,MAAK,SAAAC,GAEF,OADWA,EAAOC,UAGrBF,MAAK,SAAAG,GACFb,GAAW,GACXG,OAAOC,aAAaU,QAAQtB,EAAYc,KAAKS,UAAUF,IACvDjB,EAAWiB,MAIvB,OApCAG,qBAAU,WACN,IAAId,EAAQR,IACQ,GAAhBQ,EAAMe,OAIVrB,EAAWM,GAHPM,MAIL,IA8BC,gCACI,oBAAIU,MAAM,SAAV,2BACA,wBAAQC,QAASX,EAAjB,0BAxBR,WACI,GAAIT,EACA,OAAO,qBAAKqB,MAAM,iBAAiBC,KAAK,SAAjC,SACH,sBAAMD,MAAM,kBAAZ,0BAwBHE,GACD,qBAAKC,MAxDU,CAAEC,gBAAiB,UAAWC,QAAS,IAwDtD,SACI,uBAAOC,KAAK,SAASH,MAxDb,CAChBI,MAAO,OAAQF,QAAS,YAAaG,aAAc,GAAIC,QAAS,EAChEC,OAAQ,oBAAqBC,SAAU,QAsDUC,SA/C1B,SAACC,GACxBpC,EAAQqC,eAAeD,EAAEE,OAAOC,QA8C+CC,YAAY,sBAGvF,qBAAKC,UAAU,kBAAkBf,MAAO,CAAEgB,OAAQ,KAAlD,SACI,eAAC,cAAD,CAAa5C,QAASA,EAClB6C,cAAe,CACXC,KAAM,EACNC,UAAU,EACVC,WAAW,EACXC,QAAQ,GAEZC,YA9DI,SAACC,GACjBhD,EAAWgD,EAAOC,KAClB9C,EAAiB6C,EAAOE,YAqDhB,UAQI,cAAC,eAAD,CAAcC,MAAM,OAAOP,UAAU,EAAME,QAAQ,IACnD,cAAC,eAAD,CAAcK,MAAM,SAASP,UAAU,EAAME,QAAQ,aCvErDM,QACW,cAA7B/C,OAAOgD,SAASC,UAEe,UAA7BjD,OAAOgD,SAASC,UAEhBjD,OAAOgD,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB9C,MAAK,YAAkD,IAA/C+C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3D,MAAK,SAAC4D,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YEhH5BrB,M","file":"static/js/main.3522e1ee.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport { GridOptions } from 'ag-grid-community';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nfunction App() {\n    const storageKey = \"karaoke-storage\";\n    const [rowData, setRowData] = useState(getLocalStorageSongs());\n    const [gridApi, setGridApi] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [gridColumnApi, setGridColumnApi] = useState(null);\n    const searchDivStyle = { backgroundColor: \"#dedede\", padding: 10 }\n    const searchStyle = {\n        width: \"100%\", padding: \"10px 20px\", borderRadius: 20, outline: 0,\n        border: \"2px #68bf40 solid\", fontSize: \"100%\"\n    }\n\n    const onGridReady = (params) => {\n        setGridApi(params.api);\n        setGridColumnApi(params.columnApi);\n    };\n    const onFilterTextChange = (e) => {\n        gridApi.setQuickFilter(e.target.value)\n    }\n    useEffect(() => {\n        var songs = getLocalStorageSongs();\n        if (songs.length == 0) {\n            fetchSongsRemotely();\n            return;\n        }\n        setRowData(songs);\n    }, []);\n    function getLocalStorageSongs() {\n        var songs = window.localStorage.getItem(storageKey);\n        if (songs == null) {\n            return [];\n        }\n        return JSON.parse(songs);\n    }\n    function getLoading() {\n        if (loading) {\n            return <div class=\"spinner-border\" role=\"status\">\n                <span class=\"visually-hidden\">Loading...</span>\n            </div>\n        }\n    }\n    function fetchSongsRemotely() {\n        setLoading(true);\n        fetch('https://karaoke-birthday-admin.herokuapp.com/songs')\n            .then(result => {\n                var test = result.json();\n                return test;\n            })\n            .then(rows => {\n                setLoading(false);\n                window.localStorage.setItem(storageKey, JSON.stringify(rows));\n                setRowData(rows);\n            });\n    }\n\n    return (\n        <div>\n            <h1 align=\"center\">Karaoke night</h1>\n            <button onClick={fetchSongsRemotely}>\n                Reload Songs\n            </button>\n            {getLoading()}\n            <div style={searchDivStyle}>\n                <input type=\"search\" style={searchStyle} onChange={onFilterTextChange} placeholder=\"search songs...\" />\n            </div>\n\n            <div className=\"ag-theme-alpine\" style={{ height: 600 }}>\n                <AgGridReact rowData={rowData}\n                    defaultColDef={{\n                        flex: 1,\n                        sortable: true,\n                        resizable: true,\n                        filter: true,\n                    }}\n                    onGridReady={onGridReady}>\n                    <AgGridColumn field=\"name\" sortable={true} filter={true} />\n                    <AgGridColumn field=\"artist\" sortable={true} filter={true} />\n                </AgGridReact>\n            </div>\n        </div>\n    );\n};\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}