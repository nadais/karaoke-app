{"version":3,"sources":["CheckboxRenderer.jsx","App.js","i18n.js","index.js"],"names":["CheckboxRenderer","props","type","onChange","event","checked","target","colId","column","currentList","JSON","parse","localStorage","getItem","push","node","data","id","filter","x","setItem","stringify","setDataValue","value","Page","useSearchParams","searchParams","setSearchParams","useTranslation","t","i18n","translate","useState","headerName","field","cellRenderer","sort","flex","sortable","minWidth","columnDefs","rowData","setRowData","gridApi","setGridApi","loading","setLoading","songs","setSongs","catalogs","setCatalogs","categories","setCategories","genres","setGenres","undefined","currentGenre","setCurrentGenre","category","setCategory","catalogName","setCatalogName","searchDivStyle","padding","searchStyle","width","borderRadius","outline","border","fontSize","onFilterTextChange","e","setQuickFilter","language","a","fetch","genresResponse","result","json","response","listStorage","fullCatalog","songGroups","map","selected","includes","flatMap","v","i","indexOf","availableGenres","find","elem","getRowData","newCatalogName","newCategory","genre","onCategoryChanged","onGenreChanged","newGenre","parseInt","onLanguageChanged","lang","updatedSearchParams","URLSearchParams","toString","set","changeLanguage","key","useEffect","get","fetchSongsRemotely","class","src","alt","selectedList","length","song","number","artist","name","getMyList","languages","disabled","Object","keys","getLanguages","className","newCatalog","toLowerCase","role","getLoading","style","placeholder","getSearchBar","defaultColDef","resizable","suppressMovable","localeTextFunc","frameworkComponents","checkboxRenderer","onGridReady","params","api","App","fallback","use","initReactI18next","Backend","LanguageDetector","init","fallbackLng","debug","interpolation","escapeValue","backend","loadPath","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b9d9fbf.chunk.js","sourcesContent":["function CheckboxRenderer(props) {\n  function checkedHandler(event) {\n    let checked = event.target.checked;\n    let colId = props.column.colId;\n    var currentList = JSON.parse(localStorage.getItem(\"mylist\"));\n    if (currentList == null) {\n      currentList = [];\n    }\n    if (checked) {\n      currentList.push(props.node.data.id);\n    }\n    else {\n      currentList = currentList.filter(x => x !== props.node.data.id);\n    }\n    localStorage.setItem(\"mylist\", JSON.stringify(currentList));\n    props.node.setDataValue(colId, checked);\n  }\n  return <input\n    type=\"checkbox\"\n    onChange={checkedHandler}\n    checked={props.value}\n  />\n}\n\nexport default CheckboxRenderer;","import React, { useState, useEffect, Suspense } from 'react';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport { useTranslation } from 'react-i18next';\nimport { BrowserRouter, useSearchParams } from 'react-router-dom';\nimport CheckboxRenderer from './CheckboxRenderer';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nfunction Page() {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const { t, i18n } = useTranslation();\n    <AgGridColumn field=\"name\" headerName={translate(\"name\")} sortable={true} filter={true} flex={4} minWidth={250} />\n    const [columnDefs] = useState([\n        {\n            headerName: translate(\"mylist\"),\n            field: \"selected\",\n            cellRenderer: \"checkboxRenderer\",\n            sort: 'desc',\n            flex: 1\n        },\n        {\n            field: \"number\",\n            headerName: translate(\"number\"),\n            sortable: true,\n            filter: true,\n            flex: 1,\n            minWidth: 80\n        },\n        {\n            field: \"name\",\n            headerName: translate(\"name\"),\n            sortable: true,\n            filter: true,\n            flex: 4,\n            minWidth: 250\n        },\n        {\n            field: \"artist\",\n            headerName: translate(\"artist\"),\n            sortable: true,\n            filter: true,\n            flex: 2,\n            sort: 'asc',\n            minWidth: 170\n        }\n    ],\n    )\n    const [rowData, setRowData] = useState([]);\n    const [gridApi, setGridApi] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [songs, setSongs] = useState([]);\n    const [catalogs, setCatalogs] = useState([]);\n    const [categories, setCategories] = useState([]);\n    const [genres, setGenres] = useState([]);\n    const [currentGenre, setCurrentGenre] = useState(undefined);\n    const [category, setCategory] = useState(undefined);\n    const [catalogName, setCatalogName] = useState(undefined);\n    const searchDivStyle = { padding: 10 }\n    const searchStyle = {\n        width: \"100%\", padding: \"10px 20px\", borderRadius: 20, outline: 0,\n        border: \"2px #68bf40 solid\", fontSize: \"100%\"\n    }\n\n    const onGridReady = (params) => {\n        setGridApi(params.api);\n    };\n    const onFilterTextChange = (e) => {\n        gridApi.setQuickFilter(e.target.value)\n    }\n    useEffect(() => {\n        let lang = searchParams.get('lang');\n        if (lang != null) {\n            i18n.changeLanguage(lang);\n        }\n        fetchSongsRemotely(lang);\n    }, [i18n, searchParams]);\n    function getLoading() {\n        if (loading) {\n            return <div className=\"spinner-border\" role=\"status\">\n                <span className=\"visually-hidden\"> {t('loading')}</span>\n            </div>\n        }\n    }\n    function getCategories() {\n        return <div className=\"col\">\n            <select className=\"form-select\" name='catalog' onChange={onCategoryChanged}>\n                <option value=\"\"> {t('selectCategory')}</option>\n                {categories.map(key =>\n                    (<option value={key} key={key}>{t(`categories.${key.toLowerCase()}`)}</option>))}\n            </select>\n        </div>\n    }\n    function getGenres() {\n        return <div className=\"col\">\n            <select className=\"form-select\" name='catalog' onChange={onGenreChanged}>\n                <option value=\"\"> {t('selectGenre')}</option>\n                {genres.map(key =>\n                    (<option value={key.id} key={key.id}>{key.name}</option>))}\n            </select>\n        </div>\n    }\n    function getLanguages() {\n        let languages = {\n            \"en\": \"English\",\n            \"pt\": \"Português\",\n            \"fr\": \"Français\",\n            \"it\": \"Italiano\"\n        }\n        return <span>\n            <select name='language' onChange={onLanguageChanged}>\n                <option selected disabled> {t('selectLanguage')}</option>\n                {Object.keys(languages).map(key =>\n                    (<option value={key} key={key}>{languages[key]}</option>))}\n            </select>\n        </span>\n    }\n    function getMyList() {\n        var selectedList = rowData.filter(x => x.selected === true);\n        if (selectedList.length > 0) {\n            return <div class=\"accordion accordion-flush\">\n                <div class=\"accordion-item\">\n                    <h2 class=\"accordion-header\" id=\"headingOne\">\n                        <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"false\" aria-controls=\"collapseOne\">\n                            {translate(\"mylist\")}\n                        </button>\n                    </h2>\n                    <div id=\"collapseOne\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\n                        <div class=\"accordion-body\">\n                            <ul>\n                            {selectedList.map(song =>\n                            (<li key={song.key}> {song.number} - {song.artist} - {song.name}</li>))}\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        }\n    }\n    function getSearchBar() {\n        if (rowData.length > 0) {\n            return <div style={searchDivStyle}>\n                <input type=\"search\" style={searchStyle} onChange={onFilterTextChange} placeholder={t('searchSongs')} />\n            </div>\n        }\n    }\n    async function fetchSongsRemotely(language) {\n        setLoading(true);\n        let genresResponse = await fetch(`https://karaoke-juliane.herokuapp.com/songs/genres?language=${language ?? ''}`);\n        let result = await fetch('https://karaoke-juliane.herokuapp.com/songs');\n        var response = await result.json();\n        var genres = await genresResponse.json();\n        setGenres(genres);\n        setLoading(false);\n        var listStorage = localStorage.getItem(\"mylist\");\n        var currentList = JSON.parse(listStorage);\n        if (currentList == null) {\n            currentList = [];\n        }\n        let fullCatalog = response.songGroups;\n        fullCatalog = fullCatalog.map(x => {\n            x.selected = currentList.includes(x.id);\n            return x;\n        })\n        let catalogs = fullCatalog.flatMap(x => x.catalogs).filter((v, i, a) => a.indexOf(v) === i && v != null);\n        let categories = fullCatalog.flatMap(x => x.categories).filter((v, i, a) => a.indexOf(v) === i && v != null);\n        let availableGenres = fullCatalog\n            .flatMap(x => x.genres)\n            .filter((v, i, a) => a.indexOf(v) === i && v != null)\n            .map(id => {\n                var elem = genres.find(x => x.id === id);\n                return elem;\n            })\n            .filter(elem => elem != null);\n        setGenres(availableGenres);\n        setCatalogs(catalogs);\n        setCategories(categories);\n        setSongs(response.songGroups);\n        setRowData(fullCatalog);\n    }\n\n    function getRowData(newCatalogName, newCategory, genre) {\n        let result = newCatalogName == null || newCatalogName === '' ? songs : songs.filter(x => x.catalogs.includes(newCatalogName));\n        if (newCategory != null && newCategory !== '') {\n            result = result.filter(x => x.categories.includes(newCategory));\n        }\n        if (genre != null && genre !== '') {\n            result = result.filter(x => x.genres.includes(genre));\n        }\n        return result;\n    }\n\n    function onCategoryChanged(event) {\n        let newCategory = event.target.value === '' ? undefined : event.target.value;\n        setCategory(newCategory);\n        setRowData(getRowData(catalogName, newCategory, currentGenre));\n    }\n    function onGenreChanged(event) {\n        let newGenre = event.target.value === '' ? undefined : parseInt(event.target.value);\n        setCurrentGenre(newGenre);\n        setRowData(getRowData(catalogName, category, newGenre));\n    }\n\n    function onLanguageChanged(event) {\n        let lang = event.target.value;\n        let updatedSearchParams = new URLSearchParams(searchParams.toString());\n        updatedSearchParams.set('lang', lang);\n        setSearchParams(updatedSearchParams.toString());\n        i18n.changeLanguage(lang);\n    }\n\n    function onCatalogChanged(event) {\n        let newCatalog = event.target.value === '' ? undefined : event.target.value;\n        setCatalogName(newCatalog);\n        setRowData(getRowData(newCatalog, category, currentGenre));\n    }\n    function translate(key) {\n        return t(key);\n    }\n\n    return (\n        <div>\n            <div class=\"row\">\n                <div class=\"col-6 offset-md-4 offset-lg-4\"><img class=\"header-image\" src=\"header.png\" alt=\"Karaoke night\" /></div>\n            </div>\n            {getMyList()}\n            {getLanguages()}\n            <div className=\"row\">\n                <div className=\"col\">\n                    <select className=\"form-select\" name='catalog' onChange={onCatalogChanged}>\n                        <option value=\"\">{t('selectCatalog')}</option>\n                        {catalogs.map(key =>\n                            (<option value={key} key={key}>{t(`catalogs.${key.toLowerCase()}`)}</option>))}\n                    </select>\n                </div>\n                {getCategories()}\n                {getGenres()}\n                <div className=\"col\">\n                    {getLoading()}\n                </div>\n            </div>\n            {getSearchBar()}\n\n\n            <div className=\"ag-theme-alpine\" style={{ \"height\": 1000 }}>\n                <AgGridReact rowData={rowData}\n                    defaultColDef={{\n                        sortable: true,\n                        resizable: true,\n                        filter: true,\n                        suppressMovable: true\n                    }}\n                    columnDefs={columnDefs}\n                    localeTextFunc={translate}\n                    frameworkComponents={{\n                        checkboxRenderer: CheckboxRenderer\n                    }}\n                    onGridReady={onGridReady}>\n                </AgGridReact>\n            </div>\n        </div>\n    );\n};\n\n// here app catches the suspense from page in case translations are not yet loaded\nexport default function App() {\n    return (\n        <BrowserRouter>\n            <Suspense fallback=\"loading\">\n                <Page />\n            </Suspense>\n        </BrowserRouter>\n    );\n}","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .use(Backend)\n  .use(LanguageDetector)\n  .init({\n    fallbackLng: 'en',\n    debug: true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n    backend: {\n        loadPath: '/locales/{{lng}}/{{ns}}.json'\n    }\n  });\n\n  export default i18n;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './i18n';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}