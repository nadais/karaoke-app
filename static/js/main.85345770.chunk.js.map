{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","storageKey","useState","getLocalStorageSongs","rowData","setRowData","gridOptions","defaultColDef","resizable","columnDefs","field","sortable","filter","onColumnResized","params","console","log","songs","window","localStorage","getItem","JSON","parse","useEffect","Length","fetch","then","result","json","rows","setItem","stringify","className","style","height","width","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8NAgEeA,MAvDf,WACI,IAAMC,EAAa,kBACnB,EAA8BC,mBAASC,KAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACIC,EAAc,CACdC,cAAe,CACbC,WAAW,GAEbC,WAAY,CACR,CAAEC,MAAO,OAAQC,UAAU,EAAMC,QAAQ,GACzC,CAAEF,MAAO,SAAUC,UAAU,EAAMC,QAAQ,IAE/CR,QAASA,EACTS,gBAAiB,SAAUC,GACzBC,QAAQC,IAAIF,KAYlB,SAASX,IAEL,IAAIc,EAAQC,OAAOC,aAAaC,QAAQnB,GACxC,OAAY,MAATgB,EAEQ,GAEJI,KAAKC,MAAML,GAetB,OA/BAM,qBAAU,WACN,IAAIN,EAAQd,IACO,GAAhBc,EAAMO,OAKTnB,EAAWY,GAYXQ,MAAM,gCACDC,MAAK,SAAAC,GAEF,OADWA,EAAOC,UAGrBF,MAAK,SAAAG,GAEEX,OAAOC,aAAaW,QAAQ7B,EAAYoB,KAAKU,UAAUF,IACvDxB,EAAWwB,QAnBxB,IAwBC,qBAAKG,UAAU,4BAA4BC,MAAO,CAAEC,OAAQ,IAAMC,MAAO,KAAzE,SACI,cAAC,cAAD,CAAa7B,YAAaA,OC9ClB8B,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAC8B,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN5C,QAAQ4C,MAAMA,EAAMC,YEhH5BpB,M","file":"static/js/main.85345770.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport { GridOptions } from 'ag-grid-community';\n\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\n\nfunction App() {\n    const storageKey = \"karaoke-storage\";\n    const [rowData, setRowData] = useState(getLocalStorageSongs());\n    var gridOptions = {\n        defaultColDef: {\n          resizable: true,\n        },\n        columnDefs: [\n            { field: 'name', sortable: true, filter: true },\n            { field: 'artist', sortable: true, filter: true },\n          ],\n        rowData: rowData,\n        onColumnResized: function (params) {\n          console.log(params);\n        },\n      };\n    useEffect(() => {\n        var songs = getLocalStorageSongs();\n        if(songs.Length == 0)\n        {\n            fetchSongsRemotely();\n            return;\n        }\n        setRowData(songs);\n    }, []);\n    function getLocalStorageSongs()\n    {\n        var songs = window.localStorage.getItem(storageKey);\n        if(songs == null)\n        {\n            return [];\n        }\n        return JSON.parse(songs);\n    }\n    function fetchSongsRemotely() {\n        fetch('https://localhost:7232/songs')\n            .then(result => {\n                var test = result.json();\n                return test;\n            })\n            .then(rows =>\n                {\n                    window.localStorage.setItem(storageKey, JSON.stringify(rows));\n                    setRowData(rows);\n                });\n    }\n\n    return (\n        <div className=\"container ag-theme-balham\" style={{ height: 1000, width: 500 }}>\n            <AgGridReact gridOptions={gridOptions} />\n        </div>\n    );\n};\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}