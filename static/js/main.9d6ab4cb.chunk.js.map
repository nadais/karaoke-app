{"version":3,"sources":["CheckboxRenderer.jsx","App.js","i18n.js","index.js"],"names":["CheckboxRenderer","props","type","onChange","event","checked","target","colId","column","currentList","JSON","parse","localStorage","getItem","push","node","data","id","filter","x","setItem","stringify","setDataValue","callbackSelectedList","value","Page","useState","setSelectedList","songs","setSongs","useSearchParams","searchParams","setSearchParams","useTranslation","t","i18n","headerName","translate","field","cellRenderer","cellRendererParams","sort","flex","sortable","minWidth","columnDefs","rowData","setRowData","gridApi","setGridApi","loading","setLoading","catalogs","setCatalogs","categories","setCategories","genres","setGenres","undefined","currentGenre","setCurrentGenre","category","setCategory","catalogName","setCatalogName","searchDivStyle","padding","searchStyle","width","borderRadius","outline","border","fontSize","onFilterTextChange","e","setQuickFilter","language","a","fetch","genresResponse","result","json","response","fullCatalog","songGroups","map","selected","includes","flatMap","v","i","indexOf","availableGenres","find","elem","getRowData","newCatalogName","newCategory","genre","onCategoryChanged","onGenreChanged","newGenre","parseInt","onLanguageChanged","lang","updatedSearchParams","URLSearchParams","toString","set","changeLanguage","key","useEffect","get","fetchSongsRemotely","class","src","alt","newList","length","song","number","artist","name","getMyList","languages","disabled","Object","keys","getLanguages","className","newCatalog","toLowerCase","role","getLoading","style","placeholder","getSearchBar","defaultColDef","resizable","suppressMovable","localeTextFunc","frameworkComponents","checkboxRenderer","onGridReady","params","api","App","fallback","use","initReactI18next","Backend","LanguageDetector","init","fallbackLng","debug","interpolation","escapeValue","backend","loadPath","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d6ab4cb.chunk.js","sourcesContent":["function CheckboxRenderer(props) {\n  function checkedHandler(event) {\n    let checked = event.target.checked;\n    let colId = props.column.colId;\n    var currentList = JSON.parse(localStorage.getItem(\"mylist\"));\n    if (currentList == null) {\n      currentList = [];\n    }\n    if (checked) {\n      currentList.push(props.node.data.id);\n    }\n    else {\n      currentList = currentList.filter(x => x !== props.node.data.id);\n    }\n    localStorage.setItem(\"mylist\", JSON.stringify(currentList));\n    props.node.setDataValue(colId, checked);\n    props.callbackSelectedList(currentList);\n  }\n  return <input\n    type=\"checkbox\"\n    onChange={checkedHandler}\n    checked={props.value}\n  />\n}\n\nexport default CheckboxRenderer;","import React, { useState, useEffect, Suspense } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport { useTranslation } from 'react-i18next';\nimport { BrowserRouter, useSearchParams } from 'react-router-dom';\nimport CheckboxRenderer from './CheckboxRenderer';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nfunction Page() {\n    const [selectedList, setSelectedList] = useState([]);\n    const [songs, setSongs] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const { t, i18n } = useTranslation();\n    const [columnDefs] = useState([\n        {\n            headerName: translate(\"mylist\"),\n            field: \"selected\",\n            cellRenderer: \"checkboxRenderer\",\n            cellRendererParams:\n            {\n                callbackSelectedList: setSelectedList\n            },\n            sort: 'desc',\n            flex: 1\n        },\n        {\n            field: \"number\",\n            headerName: translate(\"number\"),\n            sortable: true,\n            filter: true,\n            flex: 1,\n            minWidth: 80\n        },\n        {\n            field: \"name\",\n            headerName: translate(\"name\"),\n            sortable: true,\n            filter: true,\n            flex: 4,\n            minWidth: 250\n        },\n        {\n            field: \"artist\",\n            headerName: translate(\"artist\"),\n            sortable: true,\n            filter: true,\n            flex: 2,\n            sort: 'asc',\n            minWidth: 170\n        }\n    ],\n    )\n    const [rowData, setRowData] = useState([]);\n    const [gridApi, setGridApi] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [catalogs, setCatalogs] = useState([]);\n    const [categories, setCategories] = useState([]);\n    const [genres, setGenres] = useState([]);\n    const [currentGenre, setCurrentGenre] = useState(undefined);\n    const [category, setCategory] = useState(undefined);\n    const [catalogName, setCatalogName] = useState(undefined);\n    const searchDivStyle = { padding: 10 }\n    const searchStyle = {\n        width: \"100%\", padding: \"10px 20px\", borderRadius: 20, outline: 0,\n        border: \"2px #68bf40 solid\", fontSize: \"100%\"\n    }\n\n    const onGridReady = (params) => {\n        setGridApi(params.api);\n    };\n    const onFilterTextChange = (e) => {\n        gridApi.setQuickFilter(e.target.value)\n    }\n    useEffect(() => {\n        let lang = searchParams.get('lang');\n        if (lang != null) {\n            i18n.changeLanguage(lang);\n        }\n        fetchSongsRemotely(lang);\n    }, [i18n, searchParams]);\n    function getLoading() {\n        if (loading) {\n            return <div className=\"spinner-border\" role=\"status\">\n                <span className=\"visually-hidden\"> {t('loading')}</span>\n            </div>\n        }\n    }\n    function getCategories() {\n        return <div className=\"col\">\n            <select className=\"form-select\" name='catalog' onChange={onCategoryChanged}>\n                <option value=\"\"> {t('selectCategory')}</option>\n                {categories.map(key =>\n                    (<option value={key} key={key}>{t(`categories.${key.toLowerCase()}`)}</option>))}\n            </select>\n        </div>\n    }\n    function getGenres() {\n        return <div className=\"col\">\n            <select className=\"form-select\" name='catalog' onChange={onGenreChanged}>\n                <option value=\"\"> {t('selectGenre')}</option>\n                {genres.map(key =>\n                    (<option value={key.id} key={key.id}>{key.name}</option>))}\n            </select>\n        </div>\n    }\n    function getLanguages() {\n        let languages = {\n            \"en\": \"English\",\n            \"pt\": \"Português\",\n            \"fr\": \"Français\",\n            \"it\": \"Italiano\"\n        }\n        return <span>\n            <select name='language' onChange={onLanguageChanged}>\n                <option selected disabled> {t('selectLanguage')}</option>\n                {Object.keys(languages).map(key =>\n                    (<option value={key} key={key}>{languages[key]}</option>))}\n            </select>\n        </span>\n    }\n    function getMyList() {\n\n        let newList = songs.filter(x => x.selected === true);\n\n        if (newList.length > 0) {\n            return <div class=\"accordion accordion-flush\">\n                <div class=\"accordion-item\">\n                    <h2 class=\"accordion-header\" id=\"headingOne\">\n                        <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"false\" aria-controls=\"collapseOne\">\n                            {translate(\"mylist\")}\n                        </button>\n                    </h2>\n                    <div id=\"collapseOne\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\n                        <div class=\"accordion-body\">\n                            <ul>\n                            {newList.map(song =>\n                            (<li key={song.key}> {song.number} - {song.artist} - {song.name}</li>))}\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        }\n    }\n    function getSearchBar() {\n        if (rowData.length > 0) {\n            return <div style={searchDivStyle}>\n                <input type=\"search\" style={searchStyle} onChange={onFilterTextChange} placeholder={t('searchSongs')} />\n            </div>\n        }\n    }\n    async function fetchSongsRemotely(language) {\n        setLoading(true);\n        let genresResponse = await fetch(`https://karaoke-juliane.herokuapp.com/songs/genres?language=${language ?? ''}`);\n        let result = await fetch('https://karaoke-juliane.herokuapp.com/songs');\n        var response = await result.json();\n        var genres = await genresResponse.json();\n        setGenres(genres);\n        setLoading(false);\n        var currentList = JSON.parse(localStorage.getItem(\"mylist\"));\n        if (currentList == null) {\n          currentList = [];\n        }\n        setSelectedList(currentList);    \n        let fullCatalog = response.songGroups;\n        fullCatalog = fullCatalog.map(x => {\n            x.selected = currentList.includes(x.id);\n            return x;\n        })\n        let catalogs = fullCatalog.flatMap(x => x.catalogs).filter((v, i, a) => a.indexOf(v) === i && v != null);\n        let categories = fullCatalog.flatMap(x => x.categories).filter((v, i, a) => a.indexOf(v) === i && v != null);\n        let availableGenres = fullCatalog\n            .flatMap(x => x.genres)\n            .filter((v, i, a) => a.indexOf(v) === i && v != null)\n            .map(id => {\n                var elem = genres.find(x => x.id === id);\n                return elem;\n            })\n            .filter(elem => elem != null);\n        setGenres(availableGenres);\n        setCatalogs(catalogs);\n        setCategories(categories);\n        setSongs(response.songGroups);\n        setRowData(fullCatalog);\n    }\n\n    function getRowData(newCatalogName, newCategory, genre) {\n        let result = newCatalogName == null || newCatalogName === '' ? songs : songs.filter(x => x.catalogs.includes(newCatalogName));\n        if (newCategory != null && newCategory !== '') {\n            result = result.filter(x => x.categories.includes(newCategory));\n        }\n        if (genre != null && genre !== '') {\n            result = result.filter(x => x.genres.includes(genre));\n        }\n        return result;\n    }\n\n    function onCategoryChanged(event) {\n        let newCategory = event.target.value === '' ? undefined : event.target.value;\n        setCategory(newCategory);\n        setRowData(getRowData(catalogName, newCategory, currentGenre));\n    }\n    function onGenreChanged(event) {\n        let newGenre = event.target.value === '' ? undefined : parseInt(event.target.value);\n        setCurrentGenre(newGenre);\n        setRowData(getRowData(catalogName, category, newGenre));\n    }\n\n    function onLanguageChanged(event) {\n        let lang = event.target.value;\n        let updatedSearchParams = new URLSearchParams(searchParams.toString());\n        updatedSearchParams.set('lang', lang);\n        setSearchParams(updatedSearchParams.toString());\n        i18n.changeLanguage(lang);\n    }\n\n    function onCatalogChanged(event) {\n        let newCatalog = event.target.value === '' ? undefined : event.target.value;\n        setCatalogName(newCatalog);\n        setRowData(getRowData(newCatalog, category, currentGenre));\n    }\n    function translate(key) {\n        return t(key);\n    }\n\n    return (\n        <div>\n            <div class=\"row\">\n                <div class=\"col-6 offset-md-4 offset-lg-4\"><img class=\"header-image\" src=\"header.png\" alt=\"Karaoke night\" /></div>\n            </div>\n            {getMyList()}\n            {getLanguages()}\n            <div className=\"row\">\n                <div className=\"col\">\n                    <select className=\"form-select\" name='catalog' onChange={onCatalogChanged}>\n                        <option value=\"\">{t('selectCatalog')}</option>\n                        {catalogs.map(key =>\n                            (<option value={key} key={key}>{t(`catalogs.${key.toLowerCase()}`)}</option>))}\n                    </select>\n                </div>\n                {getCategories()}\n                {getGenres()}\n                <div className=\"col\">\n                    {getLoading()}\n                </div>\n            </div>\n            {getSearchBar()}\n\n\n            <div className=\"ag-theme-alpine\" style={{ \"height\": 1000 }}>\n                <AgGridReact rowData={rowData}\n                    defaultColDef={{\n                        sortable: true,\n                        resizable: true,\n                        filter: true,\n                        suppressMovable: true\n                    }}\n                    columnDefs={columnDefs}\n                    localeTextFunc={translate}\n                    frameworkComponents={{\n                        checkboxRenderer: CheckboxRenderer\n                    }}\n                    onGridReady={onGridReady}>\n                </AgGridReact>\n            </div>\n        </div>\n    );\n};\n\n// here app catches the suspense from page in case translations are not yet loaded\nexport default function App() {\n    return (\n        <BrowserRouter>\n            <Suspense fallback=\"loading\">\n                <Page />\n            </Suspense>\n        </BrowserRouter>\n    );\n}","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .use(Backend)\n  .use(LanguageDetector)\n  .init({\n    fallbackLng: 'en',\n    debug: true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n    backend: {\n        loadPath: '/locales/{{lng}}/{{ns}}.json'\n    }\n  });\n\n  export default i18n;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './i18n';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}