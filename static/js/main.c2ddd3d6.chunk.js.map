{"version":3,"sources":["App.js","index.js"],"names":["App","useState","rowData","setRowData","gridApi","setGridApi","loading","setLoading","songs","setSongs","catalogs","setCatalogs","categories","setCategories","undefined","category","setCategory","catalogName","setCatalogName","searchDivStyle","backgroundColor","padding","searchStyle","width","borderRadius","outline","border","fontSize","onFilterTextChange","e","setQuickFilter","target","value","fetchSongsRemotely","fetch","then","result","json","response","fullCatalog","songGroups","flatMap","x","filter","v","i","a","indexOf","getRowData","newCatalogName","newCategory","includes","onCategoryChanged","event","useEffect","align","className","name","onChange","newCatalog","map","key","onClick","role","getLoading","length","style","type","placeholder","getSearchBar","defaultColDef","sortable","resizable","suppressMovable","onGridReady","params","api","field","flex","minWidth","sort","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2ddd3d6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nfunction App() {\n    const [rowData, setRowData] = useState([]);\n    const [gridApi, setGridApi] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [songs, setSongs] = useState([]);\n    const [catalogs, setCatalogs] = useState([]);\n    const [categories, setCategories] = useState([]);\n    const [category, setCategory] = useState(undefined);\n    const [catalogName, setCatalogName] = useState(undefined);\n    const searchDivStyle = { backgroundColor: \"#dedede\", padding: 10 }\n    const searchStyle = {\n        width: \"100%\", padding: \"10px 20px\", borderRadius: 20, outline: 0,\n        border: \"2px #68bf40 solid\", fontSize: \"100%\"\n    }\n\n    const onGridReady = (params) => {\n        setGridApi(params.api);\n    };\n    const onFilterTextChange = (e) => {\n        gridApi.setQuickFilter(e.target.value)\n    }\n    useEffect(() => {\n        fetchSongsRemotely();\n    }, []);\n    function getLoading() {\n        if (loading) {\n            return <div className=\"spinner-border\" role=\"status\">\n                <span className=\"visually-hidden\">Loading...</span>\n            </div>\n        }\n    }\n    function getCategories() {\n        return <div className=\"col\">\n            <select className=\"form-select\" name='catalog' onChange={onCategoryChanged}>\n                <option value=\"\"> Select category</option>\n                {categories.map(key =>\n                    (<option value={key} key={key}>{key}</option>))}\n            </select>\n        </div>\n    }\n    function getSearchBar() {\n        if (rowData.length > 0) {\n            return <div style={searchDivStyle}>\n                <input type=\"search\" style={searchStyle} onChange={onFilterTextChange} placeholder=\"search songs...\" />\n            </div>\n        }\n    }\n    function fetchSongsRemotely() {\n        setLoading(true);\n        fetch('https://karaoke-juliane.herokuapp.com/songs')\n            .then(result => {\n                var test = result.json();\n                return test;\n            })\n            .then(response => {\n                setLoading(false);\n                let fullCatalog = response.songGroups;\n                let catalogs = fullCatalog.flatMap(x => x.catalogs).filter((v, i, a) => a.indexOf(v) === i && v != null);\n                let categories = fullCatalog.flatMap(x => x.categories).filter((v, i, a) => a.indexOf(v) === i && v != null);\n                setCatalogs(catalogs);\n                setCategories(categories);\n                setSongs(response.songGroups);\n                setRowData(fullCatalog);\n            });\n    }\n\n    function getRowData(newCatalogName, newCategory)\n    {\n        let result = newCatalogName == null || newCatalogName === '' ? songs : songs.filter(x => x.catalogs.includes(newCatalogName));\n        if(newCategory != null && newCategory !== '')\n        {\n            result = result.filter(x =>x.categories.includes(newCategory));\n        }\n        return result;\n    }\n\n    function onCategoryChanged(event) {\n        let newCategory = event.target.value === '' ? undefined : event.target.value;\n        setCategory(newCategory);\n        setRowData(getRowData(catalogName, newCategory));\n    }\n\n    function onCatalogChanged(event) {\n        let newCatalog = event.target.value === '' ? undefined : event.target.value;\n        setCatalogName(newCatalog);\n        setRowData(getRowData(newCatalog, category));\n    }\n\n    return (\n        <div>\n            <h1 align=\"center\">Karaoke night</h1>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <select className=\"form-select\" name='catalog' onChange={onCatalogChanged}>\n                        <option value=\"\"> Select catalog</option>\n                        {catalogs.map(key =>\n                            (<option value={key} key={key}>{key}</option>))}\n                    </select>\n                </div>\n                {getCategories()}\n                <div className=\"col\">\n                    <button onClick={fetchSongsRemotely} className=\"btn btn-primary\">\n                        Reload Songs\n                    </button>\n                    {getLoading()}\n                </div>\n            </div>\n            {getSearchBar()}\n\n\n            <div className=\"ag-theme-alpine\"  style={{ \"height\": 1000 }}>\n                <AgGridReact rowData={rowData}\n                    defaultColDef={{\n                        sortable: true,\n                        resizable: true,\n                        filter: true,\n                        suppressMovable: true\n                    }}\n                    onGridReady={onGridReady}>\n                    <AgGridColumn field=\"number\" sortable={true} filter={true} flex={1} minWidth={80}/>\n                    <AgGridColumn field=\"name\" sortable={true} filter={true} flex={4} minWidth={250}/>\n                    <AgGridColumn field=\"artist\" sortable={true} filter={true} flex={2} sort={'asc'} minWidth={170}/>\n                </AgGridReact>\n            </div>\n        </div>\n    );\n};\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}