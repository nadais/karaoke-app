{"version":3,"sources":["CheckboxRenderer.jsx","App.js","i18n.js","index.js"],"names":["props","checkedHandler","bind","event","checked","target","colId","this","column","currentList","JSON","parse","localStorage","getItem","push","node","data","id","remove","setItem","stringify","setDataValue","type","onChange","value","Component","Page","useSearchParams","searchParams","setSearchParams","useTranslation","t","i18n","translate","useState","headerName","field","cellRenderer","flex","sortable","filter","minWidth","sort","columnDefs","rowData","setRowData","gridApi","setGridApi","loading","setLoading","songs","setSongs","catalogs","setCatalogs","categories","setCategories","genres","setGenres","undefined","currentGenre","setCurrentGenre","category","setCategory","catalogName","setCatalogName","searchDivStyle","padding","searchStyle","width","borderRadius","outline","border","fontSize","onFilterTextChange","e","setQuickFilter","language","a","fetch","genresResponse","result","json","response","listStorage","fullCatalog","songGroups","map","x","selected","includes","flatMap","v","i","indexOf","availableGenres","find","elem","getRowData","newCatalogName","newCategory","genre","onCategoryChanged","onGenreChanged","newGenre","parseInt","onLanguageChanged","lang","updatedSearchParams","URLSearchParams","toString","set","changeLanguage","key","useEffect","get","fetchSongsRemotely","class","src","languages","name","disabled","Object","keys","getLanguages","className","newCatalog","toLowerCase","role","getLoading","length","style","placeholder","getSearchBar","defaultColDef","resizable","suppressMovable","localeTextFunc","onGridReady","params","api","frameworkComponents","checkboxRenderer","CheckboxRenderer","App","fallback","use","initReactI18next","Backend","LanguageDetector","init","fallbackLng","debug","interpolation","escapeValue","backend","loadPath","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd2739ce.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class extends Component {\n  constructor(props) {\n    super(props);\n    this.checkedHandler = this.checkedHandler.bind(this);\n  }\n  checkedHandler(event) {\n    let checked = event.target.checked;\n    let colId = this.props.column.colId;\n    var currentList = JSON.parse(localStorage.getItem(\"mylist\"));\n    if(currentList == null)\n    {\n      currentList = [];\n    }\n    if(checked)\n    {\n      currentList.push(this.props.node.data.id);\n    }\n    else\n    {\n      currentList.remove(this.props.node.data.id);\n    }\n    localStorage.setItem(\"mylist\", JSON.stringify(currentList));\n    this.props.node.setDataValue(colId, checked);\n  }\n  render() {\n    return (\n      <input\n        type=\"checkbox\"\n        onChange={this.checkedHandler}\n        checked={this.props.value}\n      />\n    );\n  }\n}\n","import React, { useState, useEffect, Suspense } from 'react';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport { useTranslation } from 'react-i18next';\nimport { BrowserRouter, _, useSearchParams } from 'react-router-dom';\nimport CheckboxRenderer from './CheckboxRenderer';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nfunction Page() {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const { t, i18n } = useTranslation();\n    <AgGridColumn field=\"name\" headerName={translate(\"name\")} sortable={true} filter={true} flex={4} minWidth={250} />\n    const [columnDefs, _] = useState([\n        {\n            headerName: translate(\"mylist\"),\n            field: \"selected\",\n            cellRenderer: \"checkboxRenderer\",\n            flex: 1\n        },  \n        { \n            field: \"number\",\n            headerName: translate(\"number\"),\n            sortable: true,\n            filter: true,\n            flex: 1,\n            minWidth: 80\n        },\n        { \n            field: \"name\",\n            headerName: translate(\"name\"),\n            sortable: true,\n            filter: true,\n            flex: 4,\n            minWidth: 250\n        },\n        { \n            field: \"artist\",\n            headerName: translate(\"artist\"),\n            sortable: true,\n            filter: true,\n            flex: 2,\n            sort: 'asc',\n            minWidth: 170\n        }\n      ],\n)\n    const [rowData, setRowData] = useState([]);\n    const [gridApi, setGridApi] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [songs, setSongs] = useState([]);\n    const [catalogs, setCatalogs] = useState([]);\n    const [categories, setCategories] = useState([]);\n    const [genres, setGenres] = useState([]);\n    const [currentGenre, setCurrentGenre] = useState(undefined);\n    const [category, setCategory] = useState(undefined);\n    const [catalogName, setCatalogName] = useState(undefined);\n    const searchDivStyle = { padding: 10 }\n    const searchStyle = {\n        width: \"100%\", padding: \"10px 20px\", borderRadius: 20, outline: 0,\n        border: \"2px #68bf40 solid\", fontSize: \"100%\"\n    }\n\n    const onGridReady = (params) => {\n        setGridApi(params.api);\n    };\n    const onFilterTextChange = (e) => {\n        gridApi.setQuickFilter(e.target.value)\n    }\n    useEffect(() => {\n        let lang = searchParams.get('lang');\n        if (lang != null) {\n            i18n.changeLanguage(lang);\n        }\n        fetchSongsRemotely(lang);\n    }, []);\n    function getLoading() {\n        if (loading) {\n            return <div className=\"spinner-border\" role=\"status\">\n                <span className=\"visually-hidden\"> {t('loading')}</span>\n            </div>\n        }\n    }\n    function getCategories() {\n        return <div className=\"col\">\n            <select className=\"form-select\" name='catalog' onChange={onCategoryChanged}>\n                <option value=\"\"> {t('selectCategory')}</option>\n                {categories.map(key =>\n                    (<option value={key} key={key}>{t(`categories.${key.toLowerCase()}`)}</option>))}\n            </select>\n        </div>\n    }\n    function getGenres() {\n        return <div className=\"col\">\n            <select className=\"form-select\" name='catalog' onChange={onGenreChanged}>\n                <option value=\"\"> {t('selectGenre')}</option>\n                {genres.map(key =>\n                    (<option value={key.id} key={key.id}>{key.name}</option>))}\n            </select>\n        </div>\n    }\n    function getLanguages() {\n        let languages = {\n            \"en\": \"English\",\n            \"pt\": \"Português\",\n            \"fr\": \"Français\",\n            \"it\": \"Italiano\"\n        }\n        return <span>\n            <select name='language' onChange={onLanguageChanged}>\n                <option selected disabled> {t('selectLanguage')}</option>\n                {Object.keys(languages).map(key =>\n                    (<option value={key} key={key}>{languages[key]}</option>))}\n            </select>\n        </span>\n    }\n    function getSearchBar() {\n        if (rowData.length > 0) {\n            return <div style={searchDivStyle}>\n                <input type=\"search\" style={searchStyle} onChange={onFilterTextChange} placeholder={t('searchSongs')} />\n            </div>\n        }\n    }\n    async function fetchSongsRemotely(language) {\n        setLoading(true);\n        let genresResponse = await fetch(`https://karaoke-juliane.herokuapp.com/songs/genres?language=${language ?? ''}`);\n        let result = await fetch('https://karaoke-juliane.herokuapp.com/songs');\n        var response =  await result.json();\n        var genres = await genresResponse.json();\n        setGenres(genres);\n        setLoading(false);\n        var listStorage = localStorage.getItem(\"mylist\");\n        var currentList = JSON.parse(listStorage);\n        if(currentList == null)\n        {\n          currentList = [];\n        }\n        let fullCatalog = response.songGroups;\n        fullCatalog = fullCatalog.map(x => {\n            x.selected = currentList.includes(x.id);\n            return x;\n        })\n        let catalogs = fullCatalog.flatMap(x => x.catalogs).filter((v, i, a) => a.indexOf(v) === i && v != null);\n        let categories = fullCatalog.flatMap(x => x.categories).filter((v, i, a) => a.indexOf(v) === i && v != null);\n        let availableGenres = fullCatalog\n            .flatMap(x => x.genres)\n            .filter((v, i, a) => a.indexOf(v) === i && v != null)\n            .map(id =>\n                {\n                var elem = genres.find(x => x.id === id);\n                return elem;\n            })\n            .filter(elem => elem != null);\n        setGenres(availableGenres);\n        setCatalogs(catalogs);\n        setCategories(categories);\n        setSongs(response.songGroups);\n        setRowData(fullCatalog);\n    }\n\n    function getRowData(newCatalogName, newCategory, genre) {\n        let result = newCatalogName == null || newCatalogName === '' ? songs : songs.filter(x => x.catalogs.includes(newCatalogName));\n        if (newCategory != null && newCategory !== '') {\n            result = result.filter(x => x.categories.includes(newCategory));\n        }\n        if (genre != null && genre !== '') {\n            result = result.filter(x => x.genres.includes(genre));\n        }\n        return result;\n    }\n\n    function onCategoryChanged(event) {\n        let newCategory = event.target.value === '' ? undefined : event.target.value;\n        setCategory(newCategory);\n        setRowData(getRowData(catalogName, newCategory, currentGenre));\n    }\n    function onGenreChanged(event) {\n        let newGenre = event.target.value === '' ? undefined : parseInt(event.target.value);\n        setCurrentGenre(newGenre);\n        setRowData(getRowData(catalogName, category, newGenre));\n    }\n\n    function onLanguageChanged(event) {\n        let lang = event.target.value;\n        let updatedSearchParams = new URLSearchParams(searchParams.toString());\n        updatedSearchParams.set('lang', lang);\n        setSearchParams(updatedSearchParams.toString());\n        i18n.changeLanguage(lang);\n    }\n\n    function onCatalogChanged(event) {\n        let newCatalog = event.target.value === '' ? undefined : event.target.value;\n        setCatalogName(newCatalog);\n        setRowData(getRowData(newCatalog, category, currentGenre));\n    }\n    function translate(key) {\n        return t(key);\n    }\n\n    return (\n        <div>\n            <div class=\"row\">\n                <div class=\"col-6 offset-md-4 offset-lg-4\"><img class=\"header-image\" src=\"header.png\" /></div>\n            </div>\n            {getLanguages()}\n            <div className=\"row\">\n                <div className=\"col\">\n                    <select className=\"form-select\" name='catalog' onChange={onCatalogChanged}>\n                        <option value=\"\">{t('selectCatalog')}</option>\n                        {catalogs.map(key =>\n                            (<option value={key} key={key}>{t(`catalogs.${key.toLowerCase()}`)}</option>))}\n                    </select>\n                </div>\n                {getCategories()}\n                {getGenres()}\n                <div className=\"col\">\n                    {getLoading()}\n                </div>\n            </div>\n            {getSearchBar()}\n\n\n            <div className=\"ag-theme-alpine\" style={{ \"height\": 1000 }}>\n                <AgGridReact rowData={rowData}\n                    defaultColDef={{\n                        sortable: true,\n                        resizable: true,\n                        filter: true,\n                        suppressMovable: true\n                    }}\n                    columnDefs={columnDefs}\n                    localeTextFunc={translate}\n                    onGridReady={onGridReady}\n                    frameworkComponents={{\n                        checkboxRenderer: CheckboxRenderer\n                      }}>\n                    <AgGridColumn field=\"number\" headerName={translate(\"number\")} sortable={true} filter={true} flex={1} minWidth={80} />\n                    <AgGridColumn field=\"name\" headerName={translate(\"name\")} sortable={true} filter={true} flex={4} minWidth={250} />\n                    <AgGridColumn field=\"artist\" headerName={translate(\"artist\")} sortable={true} filter={true} flex={2} sort={'asc'} minWidth={170} />\n                </AgGridReact>\n            </div>\n        </div>\n    );\n};\n\n// here app catches the suspense from page in case translations are not yet loaded\nexport default function App() {\n    return (\n        <BrowserRouter>\n            <Suspense fallback=\"loading\">\n                <Page />\n            </Suspense>\n        </BrowserRouter>\n    );\n}","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .use(Backend)\n  .use(LanguageDetector)\n  .init({\n    fallbackLng: 'en',\n    debug: true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n    backend: {\n        loadPath: '/locales/{{lng}}/{{ns}}.json'\n    }\n  });\n\n  export default i18n;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './i18n';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}