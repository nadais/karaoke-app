{"version":3,"sources":["CheckboxRenderer.jsx","App.js","i18n.js","index.js"],"names":["Component","Page","useSearchParams","searchParams","setSearchParams","useTranslation","t","i18n","useState","rowData","setRowData","gridApi","setGridApi","loading","setLoading","songs","setSongs","catalogs","setCatalogs","categories","setCategories","genres","setGenres","undefined","currentGenre","setCurrentGenre","category","setCategory","catalogName","setCatalogName","searchDivStyle","padding","searchStyle","width","borderRadius","outline","border","fontSize","onFilterTextChange","e","setQuickFilter","target","value","language","a","fetch","genresResponse","result","json","response","fullCatalog","songGroups","map","x","isSelected","flatMap","filter","v","i","indexOf","availableGenres","id","find","elem","getRowData","newCatalogName","newCategory","genre","includes","onCategoryChanged","event","onGenreChanged","newGenre","parseInt","onLanguageChanged","lang","updatedSearchParams","URLSearchParams","toString","set","changeLanguage","translate","key","useEffect","get","fetchSongsRemotely","class","src","languages","name","onChange","selected","disabled","Object","keys","getLanguages","className","newCatalog","toLowerCase","role","getLoading","length","style","type","placeholder","getSearchBar","defaultColDef","sortable","resizable","suppressMovable","localeTextFunc","onGridReady","params","api","field","headerName","flex","minWidth","sort","App","fallback","use","initReactI18next","Backend","LanguageDetector","init","fallbackLng","debug","interpolation","escapeValue","backend","loadPath","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed6722db.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class extends Component {\n  constructor(props) {\n    super(props);\n    this.checkedHandler = this.checkedHandler.bind(this);\n  }\n  checkedHandler() {\n    // let checked = event.target.checked;\n    // let colId = this.props.column.colId;\n    // this.props.node.setDataValue(colId, checked);\n  }\n  render() {\n    return (\n      <input\n        type=\"checkbox\"\n        onClick={this.checkedHandler}\n        checked={this.props.value}\n      />\n    );\n  }\n}\n","import React, { useState, useEffect, Suspense } from 'react';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport { useTranslation } from 'react-i18next';\nimport { BrowserRouter, useParams, useSearchParams } from 'react-router-dom';\nimport CheckboxRenderer from \"./CheckboxRenderer.jsx\";\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nfunction Page() {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const { t, i18n } = useTranslation();\n    const [rowData, setRowData] = useState([]);\n    const [gridApi, setGridApi] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [songs, setSongs] = useState([]);\n    const [catalogs, setCatalogs] = useState([]);\n    const [categories, setCategories] = useState([]);\n    const [genres, setGenres] = useState([]);\n    const [currentGenre, setCurrentGenre] = useState(undefined);\n    const [category, setCategory] = useState(undefined);\n    const [catalogName, setCatalogName] = useState(undefined);\n    const searchDivStyle = { padding: 10 }\n    const searchStyle = {\n        width: \"100%\", padding: \"10px 20px\", borderRadius: 20, outline: 0,\n        border: \"2px #68bf40 solid\", fontSize: \"100%\"\n    }\n\n    const onGridReady = (params) => {\n        setGridApi(params.api);\n    };\n    const onFilterTextChange = (e) => {\n        gridApi.setQuickFilter(e.target.value)\n    }\n    useEffect(() => {\n        let lang = searchParams.get('lang');\n        if (lang != null) {\n            i18n.changeLanguage(lang);\n        }\n        fetchSongsRemotely(lang);\n    }, []);\n    function getLoading() {\n        if (loading) {\n            return <div className=\"spinner-border\" role=\"status\">\n                <span className=\"visually-hidden\"> {t('loading')}</span>\n            </div>\n        }\n    }\n    function getCategories() {\n        return <div className=\"col\">\n            <select className=\"form-select\" name='catalog' onChange={onCategoryChanged}>\n                <option value=\"\"> {t('selectCategory')}</option>\n                {categories.map(key =>\n                    (<option value={key} key={key}>{t(`categories.${key.toLowerCase()}`)}</option>))}\n            </select>\n        </div>\n    }\n    function getGenres() {\n        return <div className=\"col\">\n            <select className=\"form-select\" name='catalog' onChange={onGenreChanged}>\n                <option value=\"\"> {t('selectGenre')}</option>\n                {genres.map(key =>\n                    (<option value={key.id} key={key.id}>{key.name}</option>))}\n            </select>\n        </div>\n    }\n    function getLanguages() {\n        let languages = {\n            \"en\": \"English\",\n            \"pt\": \"Português\",\n            \"fr\": \"Français\",\n            \"it\": \"Italiano\"\n        }\n        return <span>\n            <select name='language' onChange={onLanguageChanged}>\n                <option selected disabled> {t('selectLanguage')}</option>\n                {Object.keys(languages).map(key =>\n                    (<option value={key} key={key}>{languages[key]}</option>))}\n            </select>\n        </span>\n    }\n    function getSearchBar() {\n        if (rowData.length > 0) {\n            return <div style={searchDivStyle}>\n                <input type=\"search\" style={searchStyle} onChange={onFilterTextChange} placeholder={t('searchSongs')} />\n            </div>\n        }\n    }\n    async function fetchSongsRemotely(language) {\n        setLoading(true);\n        let genresResponse = await fetch(`https://karaoke-juliane.herokuapp.com/songs/genres?language=${language ?? ''}`);\n        let result = await fetch('https://karaoke-juliane.herokuapp.com/songs');\n        var response = await result.json();\n        var genres = await genresResponse.json();\n        setGenres(genres);\n        setLoading(false);\n        let fullCatalog = response.songGroups;\n        fullCatalog = fullCatalog.map(x => {\n            x.isSelected = false;\n            return x;\n        });\n        let catalogs = fullCatalog.flatMap(x => x.catalogs).filter((v, i, a) => a.indexOf(v) === i && v != null);\n        let categories = fullCatalog.flatMap(x => x.categories).filter((v, i, a) => a.indexOf(v) === i && v != null);\n        let availableGenres = fullCatalog\n            .flatMap(x => x.genres)\n            .filter((v, i, a) => a.indexOf(v) === i && v != null)\n            .map(id => {\n                var elem = genres.find(x => x.id === id);\n                return elem;\n            })\n            .filter(elem => elem != null);\n        setGenres(availableGenres);\n        setCatalogs(catalogs);\n        setCategories(categories);\n        setSongs(response.songGroups);\n        setRowData(fullCatalog);\n    }\n\n    function getRowData(newCatalogName, newCategory, genre) {\n        let result = newCatalogName == null || newCatalogName === '' ? songs : songs.filter(x => x.catalogs.includes(newCatalogName));\n        if (newCategory != null && newCategory !== '') {\n            result = result.filter(x => x.categories.includes(newCategory));\n        }\n        if (genre != null && genre !== '') {\n            result = result.filter(x => x.genres.includes(genre));\n        }\n        return result;\n    }\n\n    function onCategoryChanged(event) {\n        let newCategory = event.target.value === '' ? undefined : event.target.value;\n        setCategory(newCategory);\n        setRowData(getRowData(catalogName, newCategory, currentGenre));\n    }\n    function onGenreChanged(event) {\n        let newGenre = event.target.value === '' ? undefined : parseInt(event.target.value);\n        setCurrentGenre(newGenre);\n        setRowData(getRowData(catalogName, category, newGenre));\n    }\n\n    function onLanguageChanged(event) {\n        let lang = event.target.value;\n        let updatedSearchParams = new URLSearchParams(searchParams.toString());\n        updatedSearchParams.set('lang', lang);\n        setSearchParams(updatedSearchParams.toString());\n        i18n.changeLanguage(lang);\n    }\n\n    function onCatalogChanged(event) {\n        let newCatalog = event.target.value === '' ? undefined : event.target.value;\n        setCatalogName(newCatalog);\n        setRowData(getRowData(newCatalog, category, currentGenre));\n    }\n    function translate(key) {\n        return t(key);\n    }\n\n    return (\n        <div>\n            <div class=\"row\">\n                <div class=\"col-6 offset-md-4 offset-lg-4\"><img class=\"header-image\" src=\"header.png\" /></div>\n            </div>\n            {getLanguages()}\n            <div className=\"row\">\n                <div className=\"col\">\n                    <select className=\"form-select\" name='catalog' onChange={onCatalogChanged}>\n                        <option value=\"\">{t('selectCatalog')}</option>\n                        {catalogs.map(key =>\n                            (<option value={key} key={key}>{t(`catalogs.${key.toLowerCase()}`)}</option>))}\n                    </select>\n                </div>\n                {getCategories()}\n                {getGenres()}\n                <div className=\"col\">\n                    {getLoading()}\n                </div>\n            </div>\n            {getSearchBar()}\n\n\n            <div className=\"ag-theme-alpine\" style={{ \"height\": 1000 }}>\n                <AgGridReact rowData={rowData}\n                    defaultColDef={{\n                        sortable: true,\n                        resizable: true,\n                        filter: true,\n                        suppressMovable: true,\n                    }}\n                    localeTextFunc={translate}\n                    onGridReady={onGridReady}>\n                    <AgGridColumn field=\"number\" headerName={translate(\"number\")} sortable={true} filter={true} flex={1} minWidth={80} />\n                    <AgGridColumn field=\"name\" headerName={translate(\"name\")} sortable={true} filter={true} flex={4} minWidth={250} />\n                    <AgGridColumn field=\"artist\" headerName={translate(\"artist\")} sortable={true} filter={true} flex={2} sort={'asc'} minWidth={170} />\n                </AgGridReact>\n            </div>\n        </div>\n    );\n};\n\n// here app catches the suspense from page in case translations are not yet loaded\nexport default function App() {\n    return (\n        <BrowserRouter>\n            <Suspense fallback=\"loading\">\n                <Page />\n            </Suspense>\n        </BrowserRouter>\n    );\n}","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .use(Backend)\n  .use(LanguageDetector)\n  .init({\n    fallbackLng: 'en',\n    debug: true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n    backend: {\n        loadPath: '/locales/{{lng}}/{{ns}}.json'\n    }\n  });\n\n  export default i18n;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './i18n';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}